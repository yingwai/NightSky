//закономерность 
/*
Сделайте генератор пазлов, который генерирует числовую закономерность, но числа должны быть в разных представлениях. 
В закономерности пропускается один из элементов. Человек должен написать данный элемент.
*/ 

/*
//1 2 3 100 5 6 7 1000 9 10 11 1100
//1 10 11 4 101 110 111 8 1001 1010 1011 12

struct Puzzle {
    descr: string,
    input: string,
    output: string,
    wrong_output: string,
    explanation: string
}

struct Data {
    inpt: string,
    point: bool,
    position: int
}

function genVersion1(length: int) -> string {
	let dec_2bit = [0, 1, 10, 11, 100, 101, 110, 111, 1000, 1001, 1010, 1011, 1100, 1101, 1110, 1111, 10000, 10001, 10010, 10011, 10100, 10101, 10110, 10111, 11000, 11001, 11010, 11011, 11100, 11101, 11110, 11111, 100000, 100001, 100010, 100011, 100100, 100101, 100110, 100111, 101000, 101001, 101010, 101011, 101100, 101101, 101110, 101111, 110000, 110001, 110010, 110011, 110100, 110101, 110110, 110111, 111000, 111001, 111010, 111011, 111100, 111101, 111110, 111111, 1000000, 1000001, 1000010, 1000011, 1000100, 1000101, 1000110, 1000111, 1001000, 1001001, 1001010, 1001011, 1001100, 1001101, 1001101, 1001110, 1001111, 1010000, 1010001, 1010010, 1010011, 1010100, 1010101, 1010110, 1010111, 1011000, 1011001, 1011010, 1011011, 1011100, 1011101, 1011110, 1011111, 1100000, 1100001, 1100010, 1100011, 1100100];
    let dec_10bit = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60 , 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100];
    let regularity = "";
    
    for (let i = 1; i < length; i += 1) {
        if (i % 4 == 0) {regularity += string(dec_2bit[i]) + " "} else {regularity += string(dec_10bit[i]) + " "};
        
        if (i % 10 == 0) {regularity += "\n"};
    };
    
    return regularity;
}

function genVersion2(length: int) -> string {
	let dec_2bit = [0, 1, 10, 11, 100, 101, 110, 111, 1000, 1001, 1010, 1011, 1100, 1101, 1110, 1111, 10000, 10001, 10010, 10011, 10100, 10101, 10110, 10111, 11000, 11001, 11010, 11011, 11100, 11101, 11110, 11111, 100000, 100001, 100010, 100011, 100100, 100101, 100110, 100111, 101000, 101001, 101010, 101011, 101100, 101101, 101110, 101111, 110000, 110001, 110010, 110011, 110100, 110101, 110110, 110111, 111000, 111001, 111010, 111011, 111100, 111101, 111110, 111111, 1000000, 1000001, 1000010, 1000011, 1000100, 1000101, 1000110, 1000111, 1001000, 1001001, 1001010, 1001011, 1001100, 1001101, 1001101, 1001110, 1001111, 1010000, 1010001, 1010010, 1010011, 1010100, 1010101, 1010110, 1010111, 1011000, 1011001, 1011010, 1011011, 1011100, 1011101, 1011110, 1011111, 1100000, 1100001, 1100010, 1100011, 1100100];
    let dec_10bit = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60 , 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100];
    let regularity = "";
    
    for (let i = 1; i < length; i += 1) {
        if (i % 4 == 0) {regularity += string(dec_10bit[i]) + " "} else {regularity += string(dec_2bit[i]) + " "};
        
        if (i % 10 == 0) {regularity += "\n"};
    };
    
    return regularity;
}

function genPoint(regularity: string, inpt: string, point: bool, position: int) -> Data {
    let reg = regularity;
    let it = inpt;
    let pt = point;
    let pos = position;
    
	for (let i = 0; i < reg.split(" ").length(); i += 1) {        
        if (i >= 4 && !pt && rand_bool()) {
			it += "  _,  ";
            pos = i;
            pt = true;
        } else {
        	it += reg.split(" ")[i] + ", ";
        }
    }
    
    return new Data {
        inpt: it,
        point: pt,
        position: pos
    };
}

function genOutp(inpt: string, position: int) -> string {
    let input = inpt;
    let pos = position;
    
    let vers1 = [1, 2, 3, 100, 5, 6, 7, 1000, 9, 10, 11, 1100, 13, 14, 15, 10000, 17, 18, 19, 10100, 21, 22, 23, 11000, 25, 26, 27, 11100, 29, 30, 31, 100000, 33, 34, 35, 100100, 37, 38, 39, 101000, 41, 42, 43, 101100, 45, 46, 47, 110000, 49, 50, 51, 110100, 53, 54, 55, 111000, 57, 58, 59, 111100, 61, 62, 63, 1000000, 65, 66, 67, 1000100, 69, 70, 71, 1001000, 73, 74, 75, 1001100, 77, 77, 78, 79, 1010000, 81, 82, 83, 1010100, 85, 86, 87, 1011000, 89, 90, 91, 1011100, 93, 94, 95, 1100000, 97, 98, 99, 1100100]
    let vers2 = [1, 10, 11, 4, 101, 110, 111, 8, 1001, 1010, 1011, 12, 1101, 1110, 1111, 16, 10001, 10010, 10011, 20, 10101, 10110, 10111, 24, 11001, 11010, 11011, 28, 11101, 11110, 11111, 32, 100001, 100010, 100011, 36, 100101, 100110, 100111, 40, 101001, 101010, 101011, 44, 101101, 101110, 101111, 48, 110001, 110010, 110011, 52, 110101, 110110, 110111, 56, 111001, 111010, 111011, 60, 111101, 111110, 111111, 64, 1000001, 1000010, 1000011, 68, 1000101, 1000110, 1000111, 72, 1001001, 1001010, 1001011, 76, 1001101, 1001101, 1001110, 1001111, 80, 1010001, 1010010, 1010011, 84, 1010101, 1010110, 1010111, 88, 1011001, 1011010, 1011011, 92, 1011101, 1011110, 1011111, 96, 1100001, 1100010, 1100011, 100]
        
    let outp = "";
    
    if (inpt.split(" ")[0] == "1," && inpt.split(" ")[1] == "2,") {outp = string(vers1[pos])} else {outp = string(vers2[pos])};
    
    return outp 
}

function genWrong(inpt: string, position: int) -> string {
    let input = inpt;
    let pos = position;
    
    let vers1 = [1, 2, 3, 100, 5, 6, 7, 1000, 9, 10, 11, 1100, 13, 14, 15, 10000, 17, 18, 19, 10100, 21, 22, 23, 11000, 25, 26, 27, 11100, 29, 30, 31, 100000, 33, 34, 35, 100100, 37, 38, 39, 101000, 41, 42, 43, 101100, 45, 46, 47, 110000, 49, 50, 51, 110100, 53, 54, 55, 111000, 57, 58, 59, 111100, 61, 62, 63, 1000000, 65, 66, 67, 1000100, 69, 70, 71, 1001000, 73, 74, 75, 1001100, 77, 77, 78, 79, 1010000, 81, 82, 83, 1010100, 85, 86, 87, 1011000, 89, 90, 91, 1011100, 93, 94, 95, 1100000, 97, 98, 99, 1100100]
    let vers2 = [1, 10, 11, 4, 101, 110, 111, 8, 1001, 1010, 1011, 12, 1101, 1110, 1111, 16, 10001, 10010, 10011, 20, 10101, 10110, 10111, 24, 11001, 11010, 11011, 28, 11101, 11110, 11111, 32, 100001, 100010, 100011, 36, 100101, 100110, 100111, 40, 101001, 101010, 101011, 44, 101101, 101110, 101111, 48, 110001, 110010, 110011, 52, 110101, 110110, 110111, 56, 111001, 111010, 111011, 60, 111101, 111110, 111111, 64, 1000001, 1000010, 1000011, 68, 1000101, 1000110, 1000111, 72, 1001001, 1001010, 1001011, 76, 1001101, 1001101, 1001110, 1001111, 80, 1010001, 1010010, 1010011, 84, 1010101, 1010110, 1010111, 88, 1011001, 1011010, 1011011, 92, 1011101, 1011110, 1011111, 96, 1100001, 1100010, 1100011, 100]
        
    let wrong = "";
    
    if (inpt.split(" ")[0] == "1," && inpt.split(" ")[1] == "2,") {wrong = string(vers2[pos])} else {wrong = string(vers1[pos])};
    
    return wrong
}

function gen_puzzle(level:int) -> Puzzle {
    if (level <= 0) {level = 1};
    if (level >= 21) {level = 20};
    
    let length = level * 5 + rand_int(10);
    if (length <= 10) {length = 10}
    if (length >= 100) {length = 100}
    
    let regularity = "";
    let inpt = "";
    
    if (rand_bool()) {regularity = genVersion1(length)} else {regularity = genVersion2(length)};
    
    let point = false;
    let position = 0;
    
    let get_point = genPoint(regularity, inpt, point, position);
    point = get_point.point;
    inpt = get_point.inpt;
    position = get_point.position;
    
    while (!point) {
        get_point = genPoint(regularity, inpt, point, position);
        point = get_point.point;
        inpt = get_point.inpt;
        position = get_point.position;    	
    };
    
    let dot = "";
    for (let i = 0; i < inpt.length(); i += 1) {
        if (i == inpt.length() - 1) {dot += ""}
        else if (i == inpt.length() - 2) {dot += ""}
        else if (i == inpt.length() - 4) {dot += "."} else {dot += string(inpt[i]);};    	
	}
    inpt = dot;

    let outp = genOutp(inpt, position);
    let wrong = genWrong(inpt, position);
    
    let task = "Дана|Представлена|Выставлена|Указана|Видна|Показана|Подчёркнута|Выделена".split("|")[rand_int(8)];
    let wher = "в школе|на факультативе|у репетитора|на олимпиаде".split("|")[rand_int(4)];
    let whatDo = "выяснить|написать|указать|определить|найти".split("|")[rand_int(4)];

    let sc = "Инна Аня Алина Оля Катя Полина Арина Вера Надя Соня Бьянка Василиса Ванесса Вероника Жанна".split(" ")[rand_int(15)] +
            " получила " + wher + " " + "задачу|задачу на внимательность|упражнение|тест, в котором есть задача|дополнительное задание|задание".split("|")[rand_int(6)] + ". " + 
      		task + " закономерность из " + string(length) + " чисел, её попросили " + whatDo + " пропущенное число, число может быть как в двоичной системой счисления, так и в десятичной.";

    if (rand_bool()) {sc="Требуется указать пропущенное число в закономенрости, число может быть как в двоичной системой счисления, так и в десятичной."}
    let descr = sc + "\n Формат вывода, следующий: пропущенное число. \n Пример: 7. \n Пример: 111.";
    
    
    let expl = "Получаем закономерность из чисел 2-ой системы счисления и 10-ой. Проверяем порядок чисел, и находим пропущенное число.";
    
   	return new Puzzle{
         descr: descr,
         input: inpt,
         output: outp,
         wrong_output: wrong,
         explanation: expl
     };
}
*/